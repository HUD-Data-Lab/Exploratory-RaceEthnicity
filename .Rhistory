# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q14a
y_n_dkr_dnc_list <- c("Yes", "No", "Client.Does.Not.Know.or.Prefers.Not.to.Answer", "Data.Not.Collected")
# ------------------------------------------------------------------------------
# -------------------- Length of Participation List ----------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q22d
length_of_participation <- length_of_time_groups("CAPER", "enrollment_length_group")
# ------------------------------------------------------------------------------
# ------------------------ Possible Outcome List -------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q23c
possible_outcomes <- c("P", "N", "X")
# ------------------------------------------------------------------------------
# ----------------------- Prevention Outcome List ------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q24
assessment_outcomes = c("Able to maintain the housing they had at project start--Without a subsidy",
"Able to maintain the housing they had at project start--With the subsidy they had at project start",
"Able to maintain the housing they had at project start--With an on-going subsidy acquired since project start",
"Able to maintain the housing they had at project start--Only with financial assistance other than a subsidy",
"Moved to new housing unit--With on-going subsidy",
"Moved to new housing unit--Without an on-going subsidy",
"Moved in with family/friends on a temporary basis",
"Moved in with family/friends on a permanent basis",
"Moved to a transitional or temporary housing facility or program",
"Client became homeless – moving to a shelter or other place unfit for human habitation",
"Jail/prison",
"Deceased",
"Client doesn’t know/Prefers Not to Answer",
"Data not collected (no exit interview completed)")
# ------------------------------------------------------------------------------
# ----------------------- Moving On Assistance ------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q24b
moving_on_assistance <- read_excel("SupplementalTables.xlsx",
sheet = "MoveOnAssistance",
col_types = c("numeric", "text"))
# ------------------------------------------------------------------------------
# ----------------- Classification List: Veteran and Chronic -------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q25a
vet_chronic_categories <- c("Chronically Homeless Veteran",
"Non-Chronically Homeless Veteran",
"Not a Veteran",
"Client doesn’t know/Prefers Not to Answer",
"Data not collected")
# ------------------------------------------------------------------------------
# ----------------------- Classification List: Chronic -------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q26a
chronic_categories <- c("Chronically Homeless",
"Not Chronically Homeless",
"Client doesn’t know/Prefers Not to Answer",
"Data not collected")
# ------------------------------------------------------------------------------
# ---------------------- Income Amount Categories ------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q16
income_amount_categories <- c("No Income", "$1 - $150", "$151 - $250",
"$251 - $500", "$501 - $1,000",
"$1,001 - $1,500", "$1,501 - $2,000",
"$2,001+", "Client.Does.Not.Know.or.Prefers.Not.to.Answer", "Data.Not.Collected")
# ------------------------------------------------------------------------------
# -------------------- Annual Income Amount Categories-------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q16
annual_income_amount_categories <- c(income_amount_categories, "No Annual Required", "Required Annual Missing")
# ------------------------------------------------------------------------------
# ------------------------ Income Type Categories ------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q18
income_type_categories <- c("Adults with Only Earned Income (i.e., Employment Income)",
"Adults with Only Other Income",
"Adults with Both Earned and Other Income",
"Adults with No Income", "Client.Does.Not.Know.or.Prefers.Not.to.Answer",
"Missing Income Information")
# ------------------------------------------------------------------------------
# ------------------- Annual Income Type Categories ----------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q18
annual_income_type_categories <- c(income_type_categories,
"No Annual Required", "Required Annual Missing")
# ------------------------------------------------------------------------------
# ------------------------------ Gender Columns --------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER
gender_columns <- c(Woman = "Woman", Man = "Man",
CulturallySpecific = "Culturally Specific Identity",
Transgender = "Transgender", NonBinary = "Non-Binary",
Questioning = "Questioning",
DifferentIdentity = "Different Identity")
# ------------------------------------------------------------------------------
# ----------------------------- Gender List ------------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q10
# gender_list <- c()
#
# for (gender in names(gender_columns)) {
#   gender_list <- c(gender_list, gender = gender_columns[[gender]])
# }
#
# for (gender in names(gender_columns)) {
#   for (second_gender in names(gender_columns)) {
#     difference <- which(names(gender_columns) == second_gender) -
#       which(names(gender_columns) == gender)
#     if (difference > 0) {
#       test <- paste0(gender, "/", second_gender)
#       gender_list <- c(gender_list,
#                         get(test) =
#                          paste0(
#                            gender_columns[[gender]], "/",
#                            gender_columns[[second_gender]]))
#     }
#   }
# }
gender_list <- names(gender_columns)
gender_name_list <- unname(gender_columns)
possible_gender_combos <- outer(gender_list, gender_list, paste, sep = '/')
possible_gender_name_combos <- outer(gender_name_list, gender_name_list, paste, sep = '/')
for (combo in 1:6) {
gender_list <- c(gender_list, possible_gender_combos[combo, (combo + 1):7])
gender_name_list <- c(gender_name_list, possible_gender_name_combos[combo, (combo + 1):7])
}
report_list_gender <- setNames(gender_name_list, gender_list)
gender_info <- as.data.frame(gender_list)
gender_info$gender_name_list <- gender_name_list
gender_info[ , names(gender_columns)] <- NA
for (col in names(gender_columns)) {
gender_info <- gender_info %>%
mutate(!!col := if_else(str_detect(gender_list, col),
1, 0))
}
# ------------------------------------------------------------------------------
# ------------------------ CSV Benefit Categories -----------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q20a
benefit_list <- c("SNAP", "WIC", "TANFChildCare", "TANFTransportation",
"OtherTANF", "OtherBenefitsSource")
# ------------------------------------------------------------------------------
# ------------------------ CSV Income Categories -----------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q19b
# income_rows_to_show <- c("Earned", "SSI", "SSDI", "VADisabilityService",
#                          "PrivateDisability", "WorkersComp", "TANF",
#                          "SocSecRetirement", "Pension", "ChildSupport",
#                          "Other.Source")
income_rows_to_show <- IncomeTypes$IncomeGroup
# ------------------------------------------------------------------------------
# ------------------------ Outreach Contact Groups -----------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER - Q9
contact_groups <- c("Once", "2-5 times", "6-9 times", "10+ times")
# ------------------------------------------------------------------------------
# ----------------------------- Household Type Groups --------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER -
household_group_list <- c(Total = 0, Without.Children = 0,
With.Children.And.Adults = 0, With.Only.Children = 0,
Unknown.Household.Type = 0)
# ------------------------------------------------------------------------------
# ------------------------- Split Household Type Groups ------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER -
split_household_group_list <- c(Total = 0, Without.Children = 0,
Adults.in.HH.with.Children.and.Adults = 0,
Children.in.HH.with.Children.and.Adults = 0,
With.Only.Children = 0, Unknown.Household.Type = 0)
# ------------------------------------------------------------------------------
# --------------------------- Standard Detail Columns --------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER detail exports
standard_detail_columns <- c("ProjectName", "HouseholdID", "PersonalID",
"EnrollmentID", "RelationshipToHoH",
"EntryDate", "ExitDate", "household_type")
# ------------------------------------------------------------------------------
# ----------------------- Housing Program Detail Columns -----------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER detail exports
housing_program_detail_columns <- c("ProjectName", "HouseholdID",
"PersonalID", "EnrollmentID",
"RelationshipToHoH", "EntryDate",
"HoH_HMID", "MoveInDateAdj",
"ExitDate", "leaver", "household_type")
# ------------------------------------------------------------------------------
# ------------------------- Demographic Detail Columns -------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER detail exports
demographic_detail_columns <- c("age", "age_group", "VeteranStatus",
"household_type", "DisablingCondition",
"chronic")
# ------------------------------------------------------------------------------
# ------------------------ LOT Homeless Detail Columns -------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER detail exports
lot_homeless_detail_columns <- c("LivingSituation", "LengthOfStay",
"LOSUnderThreshold","PreviousStreetESSH",
"DateToStreetESSH", "TimesHomelessPastThreeYears",
"MonthsHomelessPastThreeYears")
# ------------------------------------------------------------------------------
# ------------------------------ CE Detail Columns -----------------------------
# ------------------------------------------------------------------------------
# used in:
#   CE APR detail exports
ce_detail_columns <- c(standard_detail_columns, "AssessmentDate")
# ------------------------------------------------------------------------------
# ------------------------------ Referral Results  -----------------------------
# ------------------------------------------------------------------------------
# used in:
#   CE APR
referral_results <- c("Successful referral: client accepted",
"Unsuccessful referral: client rejected",
"Unsuccessful referral: provider rejected",
"No result recorded")
# ------------------------------------------------------------------------------
# ------------------------------- CSV Columns ----------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER -
CSV_columns <- read_excel("SupplementalTables.xlsx",
sheet = "CSV_Columns") %>%
mutate(RDataType = case_when(
str_detect(DataType, "S") ~ "c",
DataType == "I" ~ "i",
DataType %in% c("T", "D") ~ DataType,
str_detect(DataType, "M") ~ "d"
)) %>%
select(File, ColumnName, RDataType)
# ------------------------------------------------------------------------------
# -------------------------- Sexual Orientation --------------------------------
# ------------------------------------------------------------------------------
sexual_orientation_columns <- data.frame(
name = c("Heterosexual", "Gay", "Lesbian",
"Bisexual", "Questioning/Unsure",
"Other", "Client Doesn’t Know/Prefers Not to Answer",
"Client Doesn’t Know/Prefers Not to Answer",
"Data not collected"),
value = c(1, 2, 3, 4, 5, 6, 8, 9, 99))
# ------------------------------------------------------------------------------
# -------------------------- Language Supplement -------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER -
possible_languages <- read_excel("HMIS-C4-Translation-Assistance-Needed-Supplement-2024.xlsx",
range = "A1:B328")
# ------------------------------------------------------------------------------
# ------------------------ Youth Education Labels ------------------------------
# ------------------------------------------------------------------------------
# used in:
#   APR/CAPER -
youth_education_labels <- read_excel("SupplementalTables.xlsx",
sheet = "YouthEducationStatus")
file_source <- file.choose()
for (file in names(hmis_csvs_fy24)){
data <- read_csv(unzip(file_source, paste0(file, ".csv")),
col_types = get(file, hmis_csvs_fy24))
if (exists(file)) {
data <- get(file) %>%
full_join(data, by = intersect(colnames(get(file)),
colnames(data)))
}
assign(file, data)
file.remove(paste0(file, ".csv"))
}
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details at
# <https://www.gnu.org/licenses/>.
if(!exists("kit_type")) {
kit_type <- ""
}
if (kit_type == "old_kit") {
relevant_CoC <- "XX-500"
# report_start_date <- ymd(Export[1,]$ExportStartDate)
# report_end_date <- ymd(Export[1,]$ExportEndDate)
report_start_date <- ymd("2020-10-1")
report_end_date <- ymd("2021-9-30")
} else {
relevant_CoC <- "XX-501"
if (exists("lookback_stop_date")) {
report_start_date <- lookback_stop_date
report_end_date <- lookback_stop_date %m+% years(8) %m-% days(1)
} else {
report_start_date <- ymd("2021-10-1")
report_end_date <- ymd("2022-9-30")
}
}
# remove deleted records exportID colummns before proceeding with processing
for (file in names(hmis_csvs_fy24)){
data <- get(file) %>%
distinct()
new_ExportID <- data$ExportID[1]
col_order <- colnames(data)
data <- data %>%
select(-ExportID) %>%
distinct() %>%
mutate(ExportID = new_ExportID) %>%
select(all_of(col_order))
if ("DateDeleted" %in% colnames(get(file))) {
data <- data %>%
filter(is.na(DateDeleted) |
DateDeleted > report_end_date)
}
if (file == "Enrollment") {
data <- data %>%
mutate(MoveInDate = case_when(
MoveInDate <= report_end_date &
MoveInDate >= EntryDate ~ MoveInDate)) %>%
filter(EntryDate <= report_end_date &
EnrollmentID %nin% Exit$EnrollmentID[Exit$ExitDate < report_start_date])
}
if (file == "Exit") {
data <- data %>%
filter(ExitDate >= report_start_date &
ExitDate <= report_end_date)
}
if (file == "Export") {
data$SoftwareName <- "DataLab"
data$SoftwareVersion <- "1.0"
}
assign(file, data)
}
all_bed_nights <- Services %>%
left_join(Enrollment %>%
filter(ProjectID %in% Project$ProjectID[Project$ProjectType == 1]) %>%
select(EnrollmentID, EntryDate) ,
by = "EnrollmentID") %>%
filter(RecordType == 200 &
TypeProvided == 200 &
DateProvided >= EntryDate &
DateProvided <= report_end_date)
bed_nights_in_report <- all_bed_nights %>%
filter(DateProvided >= report_start_date)
# apply NbN active logic to the enrollment table, since everything is based on that
Enrollment <- Enrollment %>%
filter(ProjectID %nin% Project$ProjectID[Project$ProjectType == 1] |
EnrollmentID %in% Exit$EnrollmentID[Exit$ExitDate >= report_start_date &
Exit$ExitDate <= report_end_date] |
EnrollmentID %in% bed_nights_in_report$EnrollmentID)
disability_table <- Disabilities %>%
filter(DisabilityResponse == 1 |
(DisabilityType == 10 &
DisabilityResponse %in% c(2, 3))) %>%
mutate(disability_name = case_when(DisabilityType == 5 ~ "Physical Disability",
DisabilityType == 6 ~ "Developmental Disability",
DisabilityType == 7 ~ "Chronic Health Condition",
DisabilityType == 8 ~ "HIV/AIDS",
DisabilityType == 9 ~ "Mental Health Disorder",
DisabilityResponse == 1 ~ "Alcohol Use Disorder",
DisabilityResponse == 2 ~ "Drug Use Disorder",
DisabilityResponse == 3 ~ "Both Alcohol and Drug Use Disorders"),
disabilities = if_else(disability_name == "Both Alcohol and Drug Use Disorders", 2, 1),
indefinite_and_impairs = (DisabilityType %in% c(6, 8) |
(DisabilityType %in% c(5, 7, 9, 10) &
IndefiniteAndImpairs == 1))) %>%
select(EnrollmentID, DataCollectionStage, InformationDate, disability_name,
indefinite_and_impairs, disabilities)
#Set up data to analyze and compare ----
# Program enrollment and household information from the APR and CAPER PY24 reporting
{
project_list <- c(
234,	#"DataLab - ES-EE ESG I",
93,	#"DataLab - ES-NbN ESG",
1002,	#"DataLab - HP ESG",
1625,	#"DataLab - PSH CoC I",
1343,	#"DataLab - RRH CoC I",
1492,	#"DataLab - RRH CoC II", # set this to RRH-SSO
1051,	#"DataLab - RRH ESG I",
1647,	#"DataLab - SO ESG",
1615,	#"DataLab - SSO CoC",
389	#"DataLab - TH CoC" # update the funding source to 5
)
all_program_enrollments <- Enrollment %>%
filter(ProjectID %in% project_list) %>% # Match project list to APR
left_join(Project %>%
select(ProjectID, ProjectType, ProjectName),
by = "ProjectID") %>%
left_join(Exit %>%
select(-PersonalID),
by = "EnrollmentID")
recent_program_enrollment <- all_program_enrollments %>%
group_by(PersonalID) %>%
arrange(desc(EntryDate)) %>% #arrange by most recent entry date
slice(1L) %>% #Keep the most recent entry
ungroup()
# get additional client information (age for reporting)
client_plus <- add_client_info(recent_program_enrollment)  #View(add_client_info) Getting a warning about mac(age, na.rm=TRUE) is returning -inf
# annual_assessment_dates <- Enrollment %>% #Not currently using this.
#   group_by(HouseholdID) %>%
#   mutate(start_for_annual = max(EntryDate[RelationshipToHoH == 1]), #Max entry date for each head of household
#          years_in_project = trunc((start_for_annual %--% report_end_date) / years(1))) %>% # What does %--% do?
#   filter(years_in_project > 0) %>%
#   mutate(annual_due = start_for_annual %m+% years(years_in_project)) %>%
#   select(HouseholdID, annual_due) %>%
#   distinct()
household_info <- get_household_info(all_program_enrollments,
return_type = "household")
recent_program_enrollment_r <- recent_program_enrollment %>%
left_join(client_plus, by = "PersonalID") %>%
left_join(household_info, by = "HouseholdID") %>%
mutate(MoveInDateAdj = case_when(
!is.na(HoH_HMID) &
HoH_HMID >= DOB &
HoH_HMID >= EntryDate &
(HoH_HMID <= ExitDate |
is.na(ExitDate)) ~ HoH_HMID,
!is.na(HoH_HMID) &
(HoH_HMID <= ExitDate |
is.na(ExitDate)) ~ EntryDate),
leaver = ExitDate >= report_start_date &
ExitDate <= report_end_date &
!is.na(ExitDate)) %>%
add_chronicity_data(.)
detail_columns <- c("ProjectName","HouseholdID","PersonalID","EnrollmentID","RelationshipToHoH", "EntryDate","ExitDate")
recent_program_enrollment_allDemograhics <- recent_program_enrollment_r %>%
select(all_of(detail_columns), age_group, HoH_HMID, Destination) %>%
left_join(Client %>%
select(PersonalID, all_of(unname(race_columns)), RaceNone),
by = "PersonalID") %>%
left_join(household_info %>%
select(HouseholdID,household_type),
by = "HouseholdID")
}
Race_detail <- recent_program_enrollment_allDemograhics %>%
select("PersonalID","EnrollmentID","RelationshipToHoH","EntryDate","ExitDate","Destination","AmIndAKNative","Asian","BlackAfAmerican","HispanicLatinaeo",
"MidEastNAfrican", "NativeHIPacific","White","RaceNone") %>%
mutate(RaceCount = rowSums(across(all_of(unname(race_columns))),na.rm=TRUE)) %>%
mutate(AmIndAKNative = case_when(AmIndAKNative == 1 ~ "AmIndAKNative", AmIndAKNative == 0 ~ NA),
Asian = case_when(Asian == 1 ~ "Asian", Asian == 0 ~ NA),
BlackAfAmerican = case_when(BlackAfAmerican == 1 ~ "BlackAfAmerican", BlackAfAmerican == 0 ~ NA),
HispanicLatinaeo = case_when(HispanicLatinaeo == 1 ~ "HispanicLatinaeo", HispanicLatinaeo == 0 ~ NA),
MidEastNAfrican = case_when(MidEastNAfrican == 1 ~ "MidEastNAfrican", MidEastNAfrican == 0 ~ NA),
NativeHIPacific = case_when(NativeHIPacific == 1 ~ "NativeHIPacific", NativeHIPacific == 0 ~ NA),
White = case_when(White == 1 ~ "White", White == 0 ~ NA)) %>%
mutate(race_list = apply(.[c(7:13)], 1, #is there a way to do this from the column select?
function(x) paste(x[!is.na(x)], collapse = "/")))
View(Race_detail)
Q12_detail <- recent_program_enrollment_allDemograhics %>%
select(all_of(standard_detail_columns)) %>%
left_join(Client %>%
select(PersonalID, all_of(unname(race_columns)), RaceNone),
by = "PersonalID")
Q12_counts <- Q12_detail %>%
ifnull(., 0) %>%
left_join(race_info, #Race_info created from DataLab_lists.R line 261
by = all_of(unname(race_columns))) %>%
mutate(across(
all_of(unname(race_columns)),
~ as.numeric(.)),
race_count = rowSums(across(all_of(unname(race_columns))),
na.rm = TRUE),
race_tabulation = case_when(
race_count %in% 1:2 ~ race_list,
race_count > 2 &
HispanicLatinaeo == 1 ~ "Multiracial – more than 2 races/ethnicity, with one being Hispanic/Latina/e/o",
race_count > 2 ~ "Multiracial – more than 2 races, where no option is Hispanic/Latina/e/o",
RaceNone %in% c(8, 9) ~ "Client Doesn’t Know/Prefers Not to Answer",
TRUE ~ "Data Not Collected"
)
)
APRQ12 <- Q12_counts %>%
group_by(race_tabulation) %>%
summarise(APR.Total = n()) %>%
filter(race_tabulation != "-",
race_tabulation != "Client Doesn’t Know/Prefers Not to Answer",
race_tabulation != "Data Not Collected",
is.na(race_tabulation) == FALSE) %>%
adorn_totals("row") %>%
mutate(APRQ12.per = paste0(round(100* APR.Total/sum(APR.Total[race_tabulation != "Total"],na.rm=TRUE),2),'%')) %>%
ungroup()
M1_method <- Race_detail %>%
group_by(race_list) %>%
summarise(M1.Total = n()) %>%
filter(race_list != "") %>% #what is the random blank? Is it the raceNone/missing data elements
adorn_totals("row") %>%
mutate(M1.per = paste0(round(100* M1.Total/sum(M1.Total[race_list != "Total"],
na.rm = TRUE), 2),'%')) %>%
ungroup()
View(M1_method)
# Method 1 Single/Combination grouping compared to APR ----
M1_APR_compare <-  APRQ12%>%
full_join(M1_method, by= c("race_tabulation" = "race_list"))
M1_APR_compare_ordered <- M1_APR_compare[c(1:15,17:19,16,21:23,20),]
View(M1_APR_compare_ordered)
